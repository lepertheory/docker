#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o pipefail
set -o nounset

declare -r FORCE="${1:-false}"

print_error_getting_versions_and_exit ()
{
	local -r CALLER="${1}";
	
	echo "From: $CALLER"
	echo "Got an error trying to get versions." 1>&2
	exit 65
}

validate_version ()
{
	local -r NAME="$1"
	local -r REQUIRED="$2"
	local -r CURRENT="$3"
	
	IFS=.
	local -ra REQUIRED_VERSINFO=($REQUIRED)
	local -ra CURRENT_VERSINFO=($CURRENT)
	for component in "${!REQUIRED_VERSINFO[@]}"; do
		local required_component=$((10#${REQUIRED_VERSINFO[$component]}))
		local current_component=$((10#${CURRENT_VERSINFO[$component]}))
		if (( required_component > current_component )); then
			echo "$NAME version ${REQUIRED_VERSINFO[*]} is required, ${CURRENT_VERSINFO[*]} found." 1>&2
			return 1
		elif (( required_component < current_component )); then
			return 0
		fi
	done
}

validate_versions ()
{
	trap 'print_error_getting_versions_and_exit "$(caller)"' ERR
	local SED_VERSION;    SED_VERSION="$(sed --version   | sed -rn 's/^sed( \(.*\))?\s+//p')";   readonly SED_VERSION
	local DOCKER_VERSION; DOCKER_VERSION="$(docker info  | sed -rn 's/^Server Version: //p')";   readonly DOCKER_VERSION
	local GIT_VERSION;    GIT_VERSION="$(git --version   | sed -rn 's/^git version //p')";       readonly GIT_VERSION
	local FIND_VERSION;   FIND_VERSION="$(find --version | sed -rn 's/^find( \(.*\))?\s+//p')" ; readonly FIND_VERSION
	local GREP_VERSION;   GREP_VERSION="$(grep --version | sed -rn 's/^grep( \(.*\))?\s+//p')";  readonly GREP_VERSION
	
	validate_version bash    4.3   "${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}" || return 1
	validate_version sed     4.2   "$SED_VERSION"                            || return 2
	validate_version docker 17.09  "$DOCKER_VERSION"                         || return 3
	validate_version git     2.7   "$GIT_VERSION"                            || return 4
	validate_version find    4.6   "$FIND_VERSION"                           || return 5
	validate_version grep    2.25  "$GREP_VERSION"                           || return 6
	trap '' ERR
}

validate_versions
if [[ ! $? ]]; then
	exit 64
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; readonly SCRIPT_DIR
. "$SCRIPT_DIR"/paths

echo "Building in: $(pwd)"

run mkdir --parents contexts
run cd contexts

"$SCRIPT_DIR"/contexts/build "$FORCE"
