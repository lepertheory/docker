#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

print_error_getting_versions_and_exit ()
{
  echo "Got an error trying to get versions. Either someone didn't test this script, or your" \
       "is too old." 1>&2
}

validate_versions ()
{
  # Untested dependencies: sed.
  local -ra BASH_REQUIRED=(4 3)
  local -ra DOCKER_REQUIRED=(17 09)
  local -ra GIT_REQUIRED=(2 7)
  local -ra FIND_REQUIRED=(4 7)
  local -a  DOCKER_VERSINFO
  local -a  GIT_VERSINFO
  local -a  FIND_VERSINFO
  
  local -r IFS=.
  DOCKER_VERSINFO=($(docker info    | sed -rn 's/^Server Version: //p') ); readonly DOCKER_VERSINFO
  GIT_VERSINFO=(   $(git --version  | sed -rn 's/^git version //p')     ); readonly GIT_VERSINFO
  FIND_VERSINFO=(  $(find --version | sed -rn 's/^find( \(.*\))?\s+//p')); readonly FIND_VERSINFO 

  if (( ${BASH_VERSINFO[0]}  < ${BASH_REQUIRED[0]} )) \
  || (( ${BASH_VERSINFO[0]} == ${BASH_REQUIRED[0]} && ${BASH_VERSINFO[1]} < ${BASH_REQUIRED[1]} )); then
    echo "Bash version ${BASH_REQUIRED[*]} or above required." 1>&2
    return 1
  fi
  if (( ${DOCKER_VERSINFO[0]}  < ${DOCKER_REQUIRED[0]} )) \
  || (( ${DOCKER_VERSINFO[0]} == ${DOCKER_REQUIRED[0]} && 10#${DOCKER_VERSINFO[1]} < 10#${DOCKER_REQUIRED[1]} )); then
    echo "Docker version ${DOCKER_REQUIRED[*]} or above required." 1>&2
    return 2
  fi
  if (( ${GIT_VERSINFO[0]}  < ${GIT_REQUIRED[0]} )) \
  || (( ${GIT_VERSINFO[0]} == ${GIT_REQUIRED[0]} && ${GIT_VERSINFO[1]} < ${GIT_REQUIRED[1]} )); then
    echo "Git version ${GIT_REQUIRED[*]} or above required." 1>&2
    return 3
  fi
  if (( ${FIND_VERSINFO[0]}  < ${FIND_REQUIRED[0]} )) \
  || (( ${FIND_VERSINFO[0]} == ${FIND_REQUIRED[0]} && ${FIND_VERSINFO[1]} < ${FIND_REQUIRED[1]} )); then
    echo "Find version ${FIND_REQUIRED[*]} or above required." 1>&2
    return 4
  fi
}

validate_versions || exit 64

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$(cd "${SCRIPT_DIR}")" && git rev-parse --show-toplevel)" 

"${REPO_DIR}"/contexts/lfs/bootstrap/bootstrap lfs/bootstrap

##
## Run this to get a persistent docker image running, called "controller". It serves to run programs faster, and provide a nice
## isolated place for dependencies to live.
##
#
#set -e
#set -o pipefail
#
#SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
#. "${SCRIPT_DIR}"/common
#
#buildDockerImage "${SCRIPT_DIR}/${BASE_DOCKER_NAME}"
#buildDockerImage "${SCRIPT_DIR}/${CONTROLLER_DOCKER_NAME}"
#
#if isDockerContainerNameRunning "${CONTROLLER_DOCKER_NAME}"; then
#  docker stop "${CONTROLLER_DOCKER_NAME}"
#fi
#"${SCRIPT_DIR}"/run "${SCRIPT_DIR}"/"${CONTROLLER_DOCKER_NAME}" --dockerArg -d \
#                                                                --dockerArg --name="${CONTROLLER_DOCKER_NAME}" \
#                                                                --dockerArg --rm
