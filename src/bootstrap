#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

print_error_getting_versions_and_exit ()
{
	echo "Got an error trying to get versions. Either someone didn't test this script, or your" \
       "is too old." 1>&2
}

validate_versions ()
{
	# Untested dependencies: sed.
	local -r BASH_REQUIRED=4.3
	local -r DOCKER_REQUIRED=17.9
	local -r GIT_REQUIRED=2.7
	local DOCKER_VERSINFO
	local GIT_VERSINFO
  
  local -r IFS=.

  DOCKER_VERSINFO=($(docker info | sed -rn 's/^Server Version: //p')); readonly DOCKER_VERSINFO
	GIT_VERSINFO=($(git --version | sed -rn 's/^git version //p'));      readonly GIT_VERSINFO

	if (( ${BASH_VERSINFO[0]} < 4 )) || (( ${BASH_VERSINFO[0]} == 4 && ${BASH_VERSINFO[1]} < 3 )); then
		echo "Bash version 4.3 or above required." 1>&2
		return 1
	fi
	if (( ${DOCKER_VERSINFO[0]} < 17 )) \
		 || (( ${DOCKER_VERSINFO[0]} == 17 && 10#${DOCKER_VERSINFO[1]} < 9 )); then
		echo "Docker version 17.09 or above required." 1>&2
		return 2
	fi
	if (( ${GIT_VERSINFO[0]} < 2 )) || (( ${GIT_VERSINFO[0]} == 2 && ${GIT_VERSINFO[1]} < 7 )); then
		echo "Git version 2.7 or above required." 1>&2
		return 3
	fi
}

validate_versions || exit 64

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$(cd "${SCRIPT_DIR}")" && git rev-parse --show-toplevel)" 

"${REPO_DIR}"/contexts/lfs/bootstrap/bootstrap lfs/bootstrap

##
## Run this to get a persistent docker image running, called "controller". It serves to run programs faster, and provide a nice
## isolated place for dependencies to live.
##
#
#set -e
#set -o pipefail
#
#SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
#. "${SCRIPT_DIR}"/common
#
#buildDockerImage "${SCRIPT_DIR}/${BASE_DOCKER_NAME}"
#buildDockerImage "${SCRIPT_DIR}/${CONTROLLER_DOCKER_NAME}"
#
#if isDockerContainerNameRunning "${CONTROLLER_DOCKER_NAME}"; then
#  docker stop "${CONTROLLER_DOCKER_NAME}"
#fi
#"${SCRIPT_DIR}"/run "${SCRIPT_DIR}"/"${CONTROLLER_DOCKER_NAME}" --dockerArg -d \
#                                                                --dockerArg --name="${CONTROLLER_DOCKER_NAME}" \
#                                                                --dockerArg --rm
