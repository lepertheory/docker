#!/usr/bin/env bash

set -e
set -o pipefail

DNS_DOMAIN='lepertheory.net'
DOCKER_REPO='574271486042.dkr.ecr.us-east-1.amazonaws.com'
IMAGES_BASE='images'

getAwsImageName()
{
  set -e
  set -o pipefail

  local DIRECTORY="${1}"
  if [[ -z "${DIRECTORY}" ]]; then
    echo 'DIRECTORY is required.' 1>&2
    exit 1
  fi

  echo "${DOCKER_REPO}/$(getTaggedDockerImageName "${DIRECTORY}")"
}

getBaseImage()
{
  set -e
  set -o pipefail

  local DIRECTORY="${1}"
  if [[ -z "${DIRECTORY}" ]]; then
    echo 'DIRECTORY is required.' 1>&2
    exit 1
  fi

  eval "GIT_BRANCH=\"$(getGitBranch)\"; echo \"$(grep -E '^FROM ' "${DIRECTORY}"/Dockerfile | sed -E 's/FROM\s+//')\""
}

getDockerfile()
{
  set -e
  set -o pipefail

  local TAGGED_IMAGE_NAME="${1}"
  if [[ -z "${TAGGED_IMAGE_NAME}" ]]; then
    echo 'TAGGED_IMAGE_NAME is required.' 1>&2
    exit 1
  fi

  local POTENTIAL_DOCKERFILE="$(getGitRepo)/${IMAGES_BASE}/${TAGGED_IMAGE_NAME%%:*}/Dockerfile"
  if [[ -f "${POTENTIAL_DOCKERFILE}" ]]; then
    echo "${POTENTIAL_DOCKERFILE}"
  else
    return 1
  fi
}

getDockerImageName()
{
  set -e
  set -o pipefail

  local DIRECTORY="${1}"
  if [[ -z "${DIRECTORY}" ]]; then
    echo 'DIRECTORY is required.' 1>&2
    exit 1
  fi

  basename "$(cd "${DIRECTORY}" && pwd)"
}

getDockerImageEnvironmentVariableByDirectory()
{
  set -e
  set -o pipefail

  local DIRECTORY="${1}"
  local ENVIRONMENT_VARIABLE="${2}"
  if [[ -z "${DIRECTORY}" ]] || [[ -z "${ENVIRONMENT_VARIABLE}" ]]; then
    echo 'DIRECTORY and ENVIRONMENT_VARIABLE are required.' 1>&2
    exit 1
  fi

  getDockerImageEnvironmentVariableByTaggedDockerImageName "$(getTaggedDockerImageName "${DIRECTORY}")" \
                                                           "${ENVIRONMENT_VARIABLE}"
}

getDockerImageEnvironmentVariableByTaggedDockerImageName()
{
  set -e
  set -o pipefail

  local TAGGED_DOCKER_IMAGE_NAME="${1}"
  local ENVIRONMENT_VARIABLE="${2}"
  if [[ -z "${TAGGED_DOCKER_IMAGE_NAME}" ]] || [[ -z "${ENVIRONMENT_VARIABLE}" ]]; then
    echo 'TAGGED_DOCKER_IMAGE_NAME and ENVIRONMENT_VARIABLE are required.' 1>&2
    exit 1
  fi

  docker inspect "${TAGGED_DOCKER_IMAGE_NAME}" | \
    jq --raw-output '.[0].Config.Env[] | select(startswith("'"${ENVIRONMENT_VARIABLE}"'=")) | split("=")[1:] | join("=")'
}

getDockerImageLabelByTaggedDockerImageName()
{
  set -e
  set -o pipefail

  local TAGGED_DOCKER_IMAGE_NAME="${1}"
  local LABEL="${2}"
  if [[ -z "${TAGGED_DOCKER_IMAGE_NAME}" ]] || [[ -z "${LABEL}" ]]; then
    echo 'TAGGED_DOCKER_IMAGE_NAME and LABEL are required.' 1>&2
    exit 1
  fi

  docker inspect "${TAGGED_DOCKER_IMAGE_NAME}" | \
    jq --raw-output '.[0].Config.Labels.'"${LABEL}"
}

getDockerImageLabelByDirectory()
{
  set -e
  set -o pipefail

  local DIRECTORY="${1}"
  local LABEL="${2}"
  if [[ -z "${DIRECTORY}" ]] || [[ -z "${LABEL}" ]]; then
    echo 'DIRECTORY and LABEL are required.' 1>&2
    exit 1
  fi

  getDockerImageLabelByTaggedDockerImageName "$(getTaggedDockerImageName "${DIRECTORY}")" "${LABEL}"
}

getDockerTag()
{
  set -e
  set -o pipefail

  getGitBranch
}

getGitBranch()
{
  set -e
  set -o pipefail

  cd "$(getGitRepo)"
  git symbolic-ref --short HEAD
}

getGitRepoPath()
{
  set -e
  set -o pipefail

  CHECK_PATH="${1}"
  if [[ -z "${CHECK_PATH}" ]]; then
    echo 'CHECK_PATH is required.' 1>&2
    exit 1
  fi

  realpath --relative-to="$(getGitRepo)" "${CHECK_PATH}"
}

getGitRepo()
{
  set -e
  set -o pipefail

  cd "$(dirname "${BASH_SOURCE[0]}")"
  git rev-parse --show-toplevel
}

getTaggedDockerImageName()
{
  set -e
  set -o pipefail

  local DIRECTORY="${1}"
  if [[ -z "${DIRECTORY}" ]]; then
    echo 'DIRECTORY is required.' 1>&2
    exit 1
  fi

  echo "$(getDockerImageName "${DIRECTORY}"):$(getDockerTag)"
}

if [[ "${0}" == "${BASH_SOURCE[0]}" ]]; then
  "${@}"
fi
