#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail
shopt -s nullglob

SCRIPT_NAME="$(basename      "${BASH_SOURCE[0]}")"
SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME
readonly SCRIPT_PATH

readonly PACKAGE="$1"
readonly OPERATION="$2"
readonly ANCHOR="${3:-}"

. "$HOME"/buildscripts/common

readonly COMPLETE_SBUS_PATH="$HOME"/complete_sbus
readonly START_EPOCH_SECONDS_PATH="$HOME"/start_epoch_seconds
readonly TOTAL_SBUS_FILE="$HOME"/total_sbus
readonly SBU_SECONDS_FILE="$HOME"/sbu_seconds
readonly BUILDSCRIPT="$SCRIPT_PATH/$PACKAGE"
readonly SUPPRESSIONS="$BUILDSCRIPT"-suppressions
readonly BUILD_LOG_PREFIX="$HOME/$PACKAGE"-build
readonly OP_ARCHIVE="$SOURCES/$OPERATION"
readonly OP_STAGE="$SCRIPT_PATH/$PACKAGE-$OPERATION"

enter_build_env ()
{
	cd "$PACKAGE"
	
	export CFLAGS='-Os -pipe'
	export CXXFLAGS="$CFLAGS"
	export SOURCES
}

get_sbus_string ()
{
  local -r SBUS="$1"

  if [[ "$SBUS" == '1' ]]; then
    echo "$SBUS SBU"
  else
    echo "$SBUS SBUS"
  fi
}

show_start_progress ()
{
	echo "Building $PACKAGE ($(get_sbus_string "$PACKAGE_SBUS")$PACKAGE_ESTIMATE_TEXT)" \
	     " $COMPLETE_SBUS/$TOTAL_SBUS"                                                  \
	     " $SBUS_COMPLETE_PERCENT% Complete${ESTIMATE_TEXT}"
}

TOTAL_SBUS="$(<"$TOTAL_SBUS_FILE")";                                readonly TOTAL_SBUS
PACKAGE_SBUS="$(get_package_sbus "$BUILDSCRIPT")";                  readonly PACKAGE_SBUS
STAGE_SBUS="$(get_stage_sbus "$OP_STAGE")";                         readonly STAGE_SBUS
SBU_SECONDS="$(cat "$SBU_SECONDS_FILE" 2>/dev/null || echo 0)";     readonly SBU_SECONDS
COMPLETE_SBUS="$(cat "$COMPLETE_SBUS_PATH" 2>/dev/null || echo 0)"; readonly COMPLETE_SBUS
START_EPOCH_SECONDS="$(cat "$START_EPOCH_SECONDS_PATH" 2>/dev/null || echo 0)"; readonly START_EPOCH_SECONDS

PACKAGE_SBUS_X10="$(get_x10 "$PACKAGE_SBUS")";                            readonly PACKAGE_SBUS_X10
TOTAL_SBUS_X10="$(get_x10 "$TOTAL_SBUS")";                                readonly TOTAL_SBUS_X10
COMPLETE_SBUS_X10="$(get_x10 "$COMPLETE_SBUS")";                          readonly COMPLETE_SBUS_X10
SBUS_COMPLETE_PERCENT_X10=$((COMPLETE_SBUS_X10 * 1000 / TOTAL_SBUS_X10)); readonly SBUS_COMPLETE_PERCENT_X10
SBUS_COMPLETE_PERCENT="$(get_div10 "$SBUS_COMPLETE_PERCENT_X10")";        readonly SBUS_COMPLETE_PERCENT
NOW_EPOCH_SECONDS="$(date +%s)";                                          readonly NOW_EPOCH_SECONDS

if ((SBU_SECONDS > 0)); then
  ESTIMATE_TOTAL_SECONDS=$((SBU_SECONDS * TOTAL_SBUS_X10 / 10)); readonly ESTIMATE_TOTAL_SECONDS
  ESTIMATE_REMAINING_SECONDS=$((SBU_SECONDS * (TOTAL_SBUS_X10 - COMPLETE_SBUS_X10) / 10))
                                                                 readonly ESTIMATE_REMAINING_SECONDS
  ELAPSED_SECONDS=$((NOW_EPOCH_SECONDS - START_EPOCH_SECONDS));  readonly ELAPSED_SECONDS
  ELAPSED_TEXT="$(get_dhms "$ELAPSED_SECONDS")" ;                readonly ELAPSED_TEXT
  ESTIMATE_TIME_TEXT="$(get_dhms "$ESTIMATE_TOTAL_SECONDS")";    readonly ESTIMATE_TIME_TEX
  PACKAGE_ESTIMATED_SECONDS=$((PACKAGE_SBUS_X10 * SBU_SECONDS / 10))
	                                                               readonly PACKAGE_ESTIMATED_SECONDS

  PACKAGE_ESTIMATE_TEXT=" $(get_dhms "$PACKAGE_ESTIMATED_SECONDS")"; readonly PACKAGE_ESTIMATE_TEXT
  ESTIMATE_TEXT="  $ELAPSED_TEXT/$ESTIMATE_TIME_TEXT";               readonly ESTIMATE_TEXT
else
  readonly PACKAGE_ESTIMATE_TEXT=''
  readonly ESTIMATE_TEXT=''
fi

cd "${LFS:-$HOME}"/build

if [[ $ANCHOR == start ]]; then
	BUILD_START_EPOCH_SECONDS="$(date +%s)"; readonly BUILD_START_EPOCH_SECONDS
	if ((START_EPOCH_SECONDS == 0)); then
		echo "$BUILD_START_EPOCH_SECONDS" > "$START_EPOCH_SECONDS_PATH"
	fi
	show_start_progress
fi

if [[ -f $OP_ARCHIVE ]]; then
	readonly ARCHIVE="$OP_ARCHIVE"
	echo "Unpacking $ARCHIVE"
	tar --extract --strip-components=1 --directory="$PACKAGE" --file="$ARCHIVE"
else
	enter_build_env
	if [[ -z $OPERATION ]]; then
		"$BUILDSCRIPT" > "$BUILD_LOG_PREFIX.log" 2>&1
	else
		"$BUILDSCRIPT" "$OP_STAGE" > "$BUILD_LOG_PREFIX-$OPERATION.log" 2>&1
	fi
fi

if [[ $ANCHOR == end ]]; then
	BUILD_END_EPOCH_SECONDS="$(date +%s)"

	echo "Done building $PACKAGE in $(get_dhms $((BUILD_END_EPOCH_SECONDS - BUILD_START_EPOCH_SECONDS)))"
fi

BUILD_ELAPSED_SECONDS=$((BUILD_END_EPOCH_SECONDS - BUILD_START_EPOCH_SECONDS))
NEW_COMPLETE_SBUS_X10=$((COMPLETE_SBUS_X10 + PACKAGE_SBUS_X10)); readonly NEW_COMPLETE_SBUS_X10
NEW_COMPLETE_SBUS="$(get_div10 "$NEW_COMPLETE_SBUS_X10")";       readonly NEW_COMPLETE_SBUS

echo "$NEW_COMPLETE_SBUS" > "$COMPLETE_SBUS_PATH"
if ((SBU_SECONDS == 0)); then
  echo "$BUILD_ELAPSED_SECONDS" > "$SBU_SECONDS_FILE"
fi
